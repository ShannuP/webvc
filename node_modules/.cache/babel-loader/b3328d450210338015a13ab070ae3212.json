{"ast":null,"code":"var _jsxFileName = \"/home/shanmukha/learning/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // import ReactDOM from 'react-dom'\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Are we adding new items to the list?\n    // Capture the scroll position so we can adjust scroll later.\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // If we have a snapshot value, we've just added new items.\n    // Adjust scroll so these new items don't push the old ones out of view.\n    // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.listRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/shanmukha/learning/src/App.js"],"names":["React","App","Component","constructor","props","listRef","createRef","getSnapshotBeforeUpdate","prevProps","prevState","list","length","current","scrollHeight","scrollTop","componentDidUpdate","snapshot","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,OAAL,GAAeL,KAAK,CAACM,SAAN,EAAf;AACD;;AAEDC,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5C;AACA;AACA,QAAID,SAAS,CAACE,IAAV,CAAeC,MAAf,GAAwB,KAAKP,KAAL,CAAWM,IAAX,CAAgBC,MAA5C,EAAoD;AAClD,YAAMD,IAAI,GAAG,KAAKL,OAAL,CAAaO,OAA1B;AACA,aAAOF,IAAI,CAACG,YAAL,GAAoBH,IAAI,CAACI,SAAhC;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACP,SAAD,EAAYC,SAAZ,EAAuBO,QAAvB,EAAiC;AACjD;AACA;AACA;AACA,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMN,IAAI,GAAG,KAAKL,OAAL,CAAaO,OAA1B;AACAF,MAAAA,IAAI,CAACI,SAAL,GAAiBJ,IAAI,CAACG,YAAL,GAAoBG,QAArC;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,GAAG,EAAE,KAAKZ,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA9B+B;;AAmClC,eAAeJ,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import ReactDOM from 'react-dom'\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Are we adding new items to the list?\n    // Capture the scroll position so we can adjust scroll later.\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // If we have a snapshot value, we've just added new items.\n    // Adjust scroll so these new items don't push the old ones out of view.\n    // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}